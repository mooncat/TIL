#조건문 체크
단순히 비슷한 기능인데 정확히 어떻게 쓰는게 더 효율적인지 의도를 알고자함. 

[ v-if / key ]
vue는 렌더링을 최소한으로 하며 효율적으로 접근하므로 종종 조건문에서 동일한 태그 사용시
재렌더링을 하지 않고 재사용하는 경우가 있다.

<template v-if="loginType === 'username'">
  <label>사용자 이름</label>
  <input placeholder="사용자 이름을 입력하세요">
</template>
<template v-else>
  <label>이메일</label>
  <input placeholder="이메일 주소를 입력하세요">
</template>

위와 같은 경우 input에 입력된 값은 사라지지 않고 조건이 바뀔 때 재사용된다. 
Input 영역이 다시 렌더링 되지 않고 바뀐 속성값인 placeholder만 재배치 하기 때문이다.

다시 렌더링하고 싶거나 별개의 엘리먼트를 확실히 독립적으로 사용하고 싶은 경우에는 
Key 속성을 추가해주면 된다. 

<template v-if="loginType === 'username'">
  <label>사용자 이름</label>
  <input placeholder="사용자 이름을 입력하세요" key="username-input">
</template>

경우에 따라 렌더링 횟수를 줄이고 재사용이 유리하게 혹은, 다시 렌더링해서 별개의 value값을 저장하고 싶은 등에 따라 적절히 사용.

[ v-show ] : 항상 렌더링이 되고 DOM에 남아있다 단지 display되지 않을 뿐이다. 
visible과 display none의 차이.. 





==== >

v-if는 조건부 블럭 안의 이벤트 리스너와 자식 컴포넌트가 토글하는 동안 적절하게 제거되고 다시 만들어지기 때문에 “진짜” 조건부 렌더링 입니다

v-if는 또한 게으릅니다 초기 렌더링에서 조건이 거짓인 경우 아무것도 하지 않습니다. 조건 블록이 처음으로 참이 될 때 까지 렌더링 되지 않습니다.

비교해보면, v-show는 훨씬 단순합니다. CSS 기반 토글만으로 초기 조건에 관계 없이 엘리먼트가 항상 렌더링 됩니다.

일반적으로 v-if는 토글 비용이 높고 v-show는 초기 렌더링 비용이 더 높습니다. 매우 자주 바꾸기를 원한다면 v-show를, 런타임 시 조건이 바뀌지 않으면 v-if를 권장합니다.


>> 
* 그러쿠나.

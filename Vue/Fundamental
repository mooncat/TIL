#시작

모든 Vue 앱은 Vue 함수로 새 Vue 인스턴스를 만드는 것부터 시작.

var vm = new Vue({
  // 옵션
})

Vue 인스턴스를 인스턴스화 할 때는 
데이터, 템플릿, 마운트할 엘리먼트, 메소드, 라이프사이클 콜백 등의 옵션을 포함 할 수있는 
options 객체를 전달 해야합니다. 


데이터가 변경되면 화면은 다시 렌더링. 
** data에 있는 속성들은 인스턴스가 생성될 때 존재한 것들만 반응형이라는 것!
그냥 외부에 새 속성을 추가한 경우는 반응형으로 재 렌더링 되지 않는다!



#인스턴스 라이프사이클 훅

각 Vue 인스턴스는 데이터 관찰을 설정하고, 
템플릿을 컴파일하고, 
인스턴스를 DOM에 마운트하고, 
데이터가 변경 될 때 
DOM을 업데이트해야 할 때 
일련의 초기화 단계를 거친다. 

그 과정에서 사용자 정의 로직을 실행할 수있는 라이프사이클 훅 도 호출.  



#비동기 갱신 큐-
Vue는 DOM 업데이트를 비동기로 합니다

Vue.js는 일반적으로 개발자가 “데이터 중심”방식으로 생각하고 DOM을 직접 만지지 않도록 권장하지만 때로는 건드려야 할 수도 있습니다. Vue.js가 데이터 변경 후 DOM 업데이트를 마칠 때까지 기다리려면 데이터가 변경된 직후에 Vue.nextTick (콜백)을 사용할 수 있습니다. 콜백은 DOM이 업데이트 된 후에 호출됩니다.


#보다걸린궁금리스트 
- aws kinesis data streams? 
https://docs.aws.amazon.com/ko_kr/streams/latest/dev/introduction.html 

- 웹에서의 프록시 개념
https://ko.vpnmentor.com/blog/proxies-vs-vpn-understanding-the-difference/
- 자바스크립트 프록시 : 프록시는 일반적으로 다른 어떤 클래스의 인터페이스로 동작하는 클래스이다. (중략) 요컨대, 프록시는 내부적으로 실제의 객체(real subject)에 접근할 때 호출되는 래퍼(wrapper) 혹은 대리 객체다.
https://hyunseob.github.io/2016/08/17/javascript-proxy/






---- @20180720

#조건문 체크

- v-if / key
vue는 렌더링을 최소한으로 하며 효율적으로 접근하므로 종종 조건문에서 동일한 태그 사용시
재렌더링을 하지 않고 재사용하는 경우가 있다.

<template v-if="loginType === 'username'">
  <label>사용자 이름</label>
  <input placeholder="사용자 이름을 입력하세요">
</template>
<template v-else>
  <label>이메일</label>
  <input placeholder="이메일 주소를 입력하세요">
</template>

위와 같은 경우 input에 입력된 값은 사라지지 않고 조건이 바뀔 때 재사용된다. 
Input 영역이 다시 렌더링 되지 않고 바뀐 속성값인 placeholder만 재배치 하기 때문이다.

다시 렌더링하고 싶거나 별개의 엘리먼트를 확실히 독립적으로 사용하고 싶은 경우에는 
Key 속성을 추가해주면 된다. 

<template v-if="loginType === 'username'">
  <label>사용자 이름</label>
  <input placeholder="사용자 이름을 입력하세요" key="username-input">
</template>

경우에 따라 렌더링 횟수를 줄이고 재사용이 유리하게 혹은, 다시 렌더링해서 별개의 value값을 저장하고 싶은 등에 따라 적절히 사용.

- v-show  : 항상 렌더링이 되고 DOM에 남아있다 단지 display되지 않을 뿐이다. 
visible과 display none의 차이.. 

==== >

v-if는 조건부 블럭 안의 이벤트 리스너와 자식 컴포넌트가 토글하는 동안 적절하게 제거되고 다시 만들어지기 때문에 “진짜” 조건부 렌더링 입니다

v-if는 또한 게으릅니다 초기 렌더링에서 조건이 거짓인 경우 아무것도 하지 않습니다. 조건 블록이 처음으로 참이 될 때 까지 렌더링 되지 않습니다.

비교해보면, v-show는 훨씬 단순합니다. CSS 기반 토글만으로 초기 조건에 관계 없이 엘리먼트가 항상 렌더링 됩니다.

일반적으로 v-if는 토글 비용이 높고 v-show는 초기 렌더링 비용이 더 높습니다. 매우 자주 바꾸기를 원한다면 v-show를, 런타임 시 조건이 바뀌지 않으면 v-if를 권장합니다.


